#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ pipeline:
- MatchContextRetriever  
- LLMReasoner

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_pipeline_components.py retriever <fixture_id>
    python test_pipeline_components.py reasoner 
    python test_pipeline_components.py full <fixture_id>
"""

import asyncio
import sys
import logging
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from processors.retriever_builder import MatchContextRetriever, test_retriever_with_fixture
from processors.llm_reasoner import LLMReasoner, test_llm_reasoner_standalone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_retriever_component(fixture_id: int):
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Retriever"""
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Retriever —Å fixture_id: {fixture_id}")
    print("=" * 50)
    
    try:
        retriever = MatchContextRetriever()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        await retriever.test_connections()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        print(f"\nüéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∞—Ç—á–∞ {fixture_id}...")
        context = await retriever.get_context_for_match(fixture_id)
        
        if context.get("error"):
            print(f"‚ùå –û—à–∏–±–∫–∞: {context['error']}")
            return False
            
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        match_info = context.get("match_info", {})
        content_summary = context.get("content_summary", {})
        
        print(f"\n‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        print(f"üèÜ –ú–∞—Ç—á: {match_info.get('home_team_name', 'Unknown')} vs {match_info.get('away_team_name', 'Unknown')}")
        print(f"üìÖ –î–∞—Ç–∞: {match_info.get('event_date', 'Unknown')}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {content_summary.get('total_chunks', 0)}")
        print(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(content_summary.get('sources', []))}")
        print(f"üìù –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {', '.join(content_summary.get('content_types', []))}")
        print(f"‚≠ê –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: {content_summary.get('avg_importance', 0)}/5")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        all_content = context.get("all_content", [])
        if all_content:
            print(f"\nüìñ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ø 3):")
            for i, chunk in enumerate(all_content[:3], 1):
                print(f"{i}. [{chunk.get('source', 'unknown')}] {chunk.get('chunk_type', 'unknown')}")
                print(f"   –í–∞–∂–Ω–æ—Å—Ç—å: {chunk.get('importance_score', 0)}/5")
                print(f"   –¢–µ–∫—Å—Ç: {chunk.get('text', '')[:100]}...")
                print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Retriever: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_reasoner_component():
    """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ LLM Reasoner"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM Reasoner...")
    print("=" * 50)
    
    try:
        reasoner = LLMReasoner()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI...")
        connection_ok = await reasoner.test_model_connection()
        if not connection_ok:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
            
        # –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        mock_context = {
            "match_info": {
                "fixture_id": 123456,
                "home_team_name": "Arsenal",
                "away_team_name": "Manchester City",
                "home_team_id": 42,
                "away_team_id": 50,
                "event_date": "2024-01-20T15:00:00Z",
                "league_id": 39,
                "status": "NS"
            },
            "content_summary": {
                "total_chunks": 8,
                "sources": ["bbc_sport", "espn", "sky_sports"],
                "content_types": ["Team News/Strategy", "Injury Update", "Pre-Match Analysis/Preview"],
                "avg_importance": 4.3,
                "date_range": {
                    "earliest": "2024-01-15T10:00:00Z",
                    "latest": "2024-01-19T18:30:00Z"
                }
            },
            "structured_content": {
                "Injury Update": [
                    {
                        "text": "Arsenal midfielder Thomas Partey ruled out for 3-4 weeks with ankle injury sustained in training. Manager confirms backup options ready.",
                        "source": "bbc_sport",
                        "chunk_type": "Injury Update",
                        "importance_score": 5,
                        "tone": "neutral",
                        "document_title": "Partey injury blow for Arsenal"
                    }
                ],
                "Team News/Strategy": [
                    {
                        "text": "Manchester City manager confirms rotation policy ahead of Champions League fixture. Key players may be rested for Premier League clash.",
                        "source": "sky_sports", 
                        "chunk_type": "Team News/Strategy",
                        "importance_score": 4,
                        "tone": "analytical",
                        "document_title": "City rotation plans revealed"
                    }
                ]
            },
            "all_content": [
                {
                    "text": "Arsenal midfielder Thomas Partey ruled out for 3-4 weeks with ankle injury sustained in training. Manager confirms backup options ready.",
                    "source": "bbc_sport",
                    "chunk_type": "Injury Update", 
                    "importance_score": 5,
                    "tone": "neutral",
                    "document_title": "Partey injury blow for Arsenal"
                },
                {
                    "text": "Manchester City manager confirms rotation policy ahead of Champions League fixture. Key players may be rested for Premier League clash.",
                    "source": "sky_sports",
                    "chunk_type": "Team News/Strategy",
                    "importance_score": 4,
                    "tone": "analytical", 
                    "document_title": "City rotation plans revealed"
                }
            ]
        }
        
        mock_odds = {
            "1X2": {"home": 3.20, "draw": 3.40, "away": 2.30},
            "Over/Under 2.5": {"over": 1.90, "under": 1.95},
            "Both Teams to Score": {"yes": 1.85, "no": 2.00}
        }
        
        print("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏...")
        prediction = await reasoner.generate_prediction(mock_context, mock_odds)
        
        if prediction:
            print("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence_score', 'unknown')}%")
            print(f"üéØ Value bets: {len(prediction.get('value_bets', []))}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {prediction.get('processing_time_seconds', 'unknown')}s")
            print(f"üìù –ú–æ–¥–µ–ª—å: {prediction.get('model_version', 'unknown')}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
            print(f"\nüîÆ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:")
            print(f"   {prediction.get('final_prediction', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å value bets
            value_bets = prediction.get('value_bets', [])
            if value_bets:
                print(f"\nüí∞ Value Bets:")
                for i, bet in enumerate(value_bets, 1):
                    print(f"   {i}. {bet.get('market', 'Unknown')}")
                    print(f"      –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {bet.get('bookmaker_odds', 'N/A')}")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {bet.get('confidence', 'N/A')}%")
                    print(f"      –î–æ–ª—è –±–∞–Ω–∫–∞: {bet.get('stake_percentage', 'N/A')}%")
                    print(f"      –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {bet.get('reasoning', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...")
                    print()
            else:
                print("\nüí∞ Value Bets: –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            insights = prediction.get('key_insights', [])
            if insights:
                print(f"\nüí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:")
                for insight in insights:
                    print(f"   ‚Ä¢ {insight}")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Reasoner: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_full_pipeline(fixture_id: int):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ pipeline: Retriever -> Reasoner"""
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ pipeline —Å fixture_id: {fixture_id}")
    print("=" * 60)
    
    try:
        # 1. Retriever
        print("üîç –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        retriever = MatchContextRetriever()
        context = await retriever.get_context_for_match(fixture_id)
        
        if context.get("error"):
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Retriever: {context['error']}")
            return False
            
        match_info = context.get("match_info", {})
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è: {match_info.get('home_team_name', 'Unknown')} vs {match_info.get('away_team_name', 'Unknown')}")
        print(f"üìä –ß–∞–Ω–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {context.get('content_summary', {}).get('total_chunks', 0)}")
        
        # 2. Mock odds (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç odds_fetcher)
        print("\nüí∞ –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)...")
        mock_odds = {
            "1X2": {"home": 2.10, "draw": 3.30, "away": 3.50},
            "Over/Under 2.5": {"over": 1.95, "under": 1.90}
        }
        
        # 3. Reasoner
        print("\nüß† –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        reasoner = LLMReasoner()
        prediction = await reasoner.generate_prediction(context, mock_odds)
        
        if prediction:
            print("‚úÖ –ü–æ–ª–Ω—ã–π pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"   ‚Ä¢ Fixture ID: {prediction.get('fixture_id', 'unknown')}")
            print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence_score', 'unknown')}%")
            print(f"   ‚Ä¢ Value bets: {len(prediction.get('value_bets', []))}")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {prediction.get('processing_time_seconds', 'unknown')}s")
            print(f"   ‚Ä¢ –ß–∞–Ω–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {prediction.get('context_chunks_used', 'unknown')}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ Reasoner")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º pipeline: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python test_pipeline_components.py retriever <fixture_id>")
        print("  python test_pipeline_components.py reasoner")
        print("  python test_pipeline_components.py full <fixture_id>")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python test_pipeline_components.py retriever 12345")
        print("  python test_pipeline_components.py reasoner")
        print("  python test_pipeline_components.py full 12345")
        return
    
    command = sys.argv[1].lower()
    
    if command == "retriever":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å fixture_id –¥–ª—è —Ç–µ—Å—Ç–∞ retriever")
            return
        fixture_id = int(sys.argv[2])
        success = await test_retriever_component(fixture_id)
        
    elif command == "reasoner":
        success = await test_reasoner_component()
        
    elif command == "full":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å fixture_id –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
            return
        fixture_id = int(sys.argv[2])
        success = await test_full_pipeline(fixture_id)
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        return
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 