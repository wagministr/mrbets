#!/usr/bin/env python3
"""
test_docker_network.py

–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import asyncio
import socket
import subprocess
import sys
import httpx
import dns.resolver
import time
import os


async def test_basic_connectivity():
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    print("=" * 60)
    
    tests = []
    
    # 1. DNS resolution test
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS resolution...")
    try:
        result = socket.gethostbyname("google.com")
        print(f"‚úÖ DNS —Ä–∞–±–æ—Ç–∞–µ—Ç: google.com -> {result}")
        tests.append(("DNS Resolution", True))
    except Exception as e:
        print(f"‚ùå DNS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        tests.append(("DNS Resolution", False))
    
    # 2. Python DNS resolution
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python DNS...")
    try:
        import dns.resolver
        answers = dns.resolver.resolve("google.com", "A")
        ip = str(answers[0])
        print(f"‚úÖ Python DNS —Ä–∞–±–æ—Ç–∞–µ—Ç: google.com -> {ip}")
        tests.append(("Python DNS", True))
    except Exception as e:
        print(f"‚ùå Python DNS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        tests.append(("Python DNS", False))
    
    # 3. HTTP connectivity test
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            response = await client.get("https://httpbin.org/get")
            if response.status_code == 200:
                print(f"‚úÖ HTTP —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                tests.append(("HTTP Connectivity", True))
            else:
                print(f"‚ö†Ô∏è HTTP —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                tests.append(("HTTP Connectivity", False))
    except Exception as e:
        print(f"‚ùå HTTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        tests.append(("HTTP Connectivity", False))
    
    # 4. TwitterAPI.io specific test
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ TwitterAPI.io...")
    try:
        async with httpx.AsyncClient(timeout=15) as client:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ö–æ—Å—Ç—É
            response = await client.get("https://api.twitterapi.io")
            print(f"‚úÖ TwitterAPI.io –¥–æ—Å—Ç—É–ø–µ–Ω: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            tests.append(("TwitterAPI.io Access", True))
    except Exception as e:
        print(f"‚ùå TwitterAPI.io –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        tests.append(("TwitterAPI.io Access", False))
    
    # 5. DNS servers test
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    try:
        with open("/etc/resolv.conf", "r") as f:
            resolv_content = f.read()
            print("DNS —Å–µ—Ä–≤–µ—Ä—ã –≤ /etc/resolv.conf:")
            print(resolv_content)
            tests.append(("DNS Config", True))
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å /etc/resolv.conf: {e}")
        tests.append(("DNS Config", False))
    
    # 6. Multiple domain resolution test
    print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤...")
    domains_to_test = [
        "api.twitterapi.io",
        "api.openai.com", 
        "httpbin.org",
        "github.com"
    ]
    
    resolved_domains = 0
    for domain in domains_to_test:
        try:
            ip = socket.gethostbyname(domain)
            print(f"‚úÖ {domain} -> {ip}")
            resolved_domains += 1
        except Exception as e:
            print(f"‚ùå {domain} -> –û–®–ò–ë–ö–ê: {e}")
    
    domain_test_passed = resolved_domains == len(domains_to_test)
    tests.append(("Multi-Domain Resolution", domain_test_passed))
    print(f"–†–∞–∑—Ä–µ—à–µ–Ω–æ {resolved_domains}/{len(domains_to_test)} –¥–æ–º–µ–Ω–æ–≤")
    
    # 7. Environment variables check
    print("\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_vars = ["TWITTERAPI_IO_KEY", "REDIS_URL"]
    env_ok = True
    for var in env_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"‚ùå {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            env_ok = False
    tests.append(("Environment Variables", env_ok))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("="*60)
    
    passed = 0
    for test_name, result in tests:
        status = "‚úÖ –û–ö" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed < len(tests):
        print("\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        if not any(result for test_name, result in tests if "DNS" in test_name):
            print("‚Ä¢ DNS –ø—Ä–æ–±–ª–µ–º—ã - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("  docker run --dns=8.8.8.8 –≤–∞—à_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
            print("  –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ docker-compose.yml:")
            print("  dns:")
            print("    - 8.8.8.8")
            print("    - 8.8.4.4")
        
        if not any(result for test_name, result in tests if "HTTP" in test_name):
            print("‚Ä¢ HTTP –ø—Ä–æ–±–ª–µ–º—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("  - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ proxy –≤ Docker")
            print("  - Firewall –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("  - –°–µ—Ç–µ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏")
        
        if not any(result for test_name, result in tests if "Environment" in test_name):
            print("‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
    
    return passed == len(tests)


def test_command_line_tools():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ç–∏–ª–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã)"""
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...")
    
    commands = [
        ("ping", ["ping", "-c", "1", "8.8.8.8"]),
        ("nslookup", ["nslookup", "google.com"]),
        ("curl", ["curl", "-I", "--max-time", "10", "https://google.com"]),
        ("wget", ["wget", "--spider", "--timeout=10", "https://google.com"])
    ]
    
    available_tools = 0
    for name, cmd in commands:
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=15)
            if result.returncode == 0:
                print(f"‚úÖ {name} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                available_tools += 1
            else:
                print(f"‚ùå {name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.stderr.strip()}")
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {name} timeout")
        except FileNotFoundError:
            print(f"üîç {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå {name} –æ—à–∏–±–∫–∞: {e}")
    
    if available_tools == 0:
        print("‚ÑπÔ∏è –°–µ—Ç–µ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤)")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —É—Ç–∏–ª–∏—Ç—ã –≤ Dockerfile:")
        print("   RUN apt-get update && apt-get install -y iputils-ping dnsutils curl wget")


async def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\n9Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    
    try:
        import redis.asyncio as redis
        redis_url = os.getenv("REDIS_URL", "redis://localhost:6379/0")
        print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis: {redis_url}")
        
        client = redis.from_url(redis_url)
        await client.ping()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        test_key = "test_docker_network"
        await client.set(test_key, "test_value", ex=60)
        value = await client.get(test_key)
        if value == b"test_value":
            print("‚úÖ Redis –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        await client.delete(test_key)
        await client.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üê≥ Docker Network Diagnostics Tool v2.0")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    print()
    
    # Async —Ç–µ—Å—Ç—ã
    network_ok = await test_basic_connectivity()
    
    # Redis —Ç–µ—Å—Ç
    redis_ok = await test_redis_connection()
    
    # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ—Å—Ç—ã
    test_command_line_tools()
    
    print("\n" + "="*60)
    if network_ok and redis_ok:
        print("üéâ –°–µ—Ç—å –∏ Redis —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
        print("–ï—Å–ª–∏ TwitterAPI.io –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
    elif network_ok:
        print("‚ö†Ô∏è –°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Redis.")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        print("–°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 