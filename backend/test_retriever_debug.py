#!/usr/bin/env python3
"""
Debug script for Retriever timestamp filtering
"""
import asyncio
from datetime import datetime, timedelta
from processors.retriever_builder import MatchContextRetriever

async def debug_timestamp_filtering():
    """Debug timestamp filtering issues"""
    print("üêõ –û—Ç–ª–∞–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Retriever...")
    
    retriever = MatchContextRetriever()
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    print("\n1. –í—Å–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ 34 –∏ 40:")
    dummy_vector = [0.0] * 1536
    
    # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
    team_filter = {
        "$or": [
            {"linked_team_ids": {"$in": ["34"]}},
            {"linked_team_ids": {"$in": ["40"]}}
        ]
    }
    
    results = retriever.pinecone_index.query(
        vector=dummy_vector,
        filter=team_filter,
        top_k=10,
        include_metadata=True
    )
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(results.matches)} –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ 34, 40")
    
    for i, match in enumerate(results.matches):
        meta = match.metadata
        print(f"   {i+1}. –ö–æ–º–∞–Ω–¥—ã: {meta.get('linked_team_ids', [])}")
        print(f"       Timestamp: {meta.get('document_timestamp', 'None')}")
        print(f"       –¢–∏–ø: {meta.get('chunk_type', 'unknown')}")
        print()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    print("2. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫:")
    all_results = retriever.pinecone_index.query(
        vector=dummy_vector, 
        top_k=50, 
        include_metadata=True
    )
    
    timestamps = []
    for match in all_results.matches:
        ts = match.metadata.get('document_timestamp')
        if ts and ts != 'None':
            timestamps.append(ts)
    
    print(f"   –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å timestamp: {len(timestamps)}")
    if timestamps:
        print(f"   –ü—Ä–∏–º–µ—Ä timestamps: {timestamps[:5]}")
    else:
        print("   ‚ö†Ô∏è –ù–µ—Ç –≤–µ–∫—Ç–æ—Ä–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ timestamp!")
    
    # 3. –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º
    print("\n3. –¢–µ—Å—Ç —Å —à–∏—Ä–æ–∫–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º:")
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –º–∏–Ω—É—Å –≥–æ–¥
    cutoff_timestamp = int((datetime.now() - timedelta(days=365)).timestamp())
    
    wide_filter = {
        "$and": [
            {
                "$or": [
                    {"linked_team_ids": {"$in": ["34"]}},
                    {"linked_team_ids": {"$in": ["40"]}}
                ]
            },
            {"document_timestamp": {"$gte": cutoff_timestamp}}
        ]
    }
    
    wide_results = retriever.pinecone_index.query(
        vector=dummy_vector,
        filter=wide_filter,
        top_k=10,
        include_metadata=True
    )
    
    print(f"   –° —à–∏—Ä–æ–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º (–æ—Ç {cutoff_timestamp}): {len(wide_results.matches)} –≤–µ–∫—Ç–æ—Ä–æ–≤")
    
    return True

if __name__ == "__main__":
    asyncio.run(debug_timestamp_filtering()) 