#!/bin/bash

# test_docker_setup.sh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker setup —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π —Å–µ—Ç–∏

set -e

echo "üê≥ MrBets Docker Network Setup & Test Script"
echo "============================================="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
check_prerequisites() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    if [ ! -f .env ]; then
        log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ .env.example"
        if [ -f .env.example ]; then
            cp .env.example .env
            log_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏"
        else
            log_error ".env.example –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    fi
    log_success ".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ TwitterAPI.io
    if ! grep -q "TWITTERAPI_IO_KEY=" .env || grep -q "TWITTERAPI_IO_KEY=$" .env; then
        log_warning "TWITTERAPI_IO_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ"
        log_info "–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à TwitterAPI.io –∫–ª—é—á –≤ .env —Ñ–∞–π–ª"
    else
        log_success "TWITTERAPI_IO_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
    
    echo ""
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    if docker build -t mrbets-backend .; then
        log_success "Backend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ backend –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
    
    echo ""
}

# –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_basic_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–µ—Ç–∏..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.test.yml down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if docker-compose -f docker-compose.test.yml up --abort-on-container-exit backend-test; then
        log_success "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        log_info "–õ–æ–≥–∏ backend-test –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
        docker-compose -f docker-compose.test.yml logs backend-test
        
        return 1
    fi
    
    # –û—á–∏—Å—Ç–∫–∞
    docker-compose -f docker-compose.test.yml down
    
    echo ""
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
interactive_debug() {
    log_info "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
    log_info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä network-debug –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º debug –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    docker-compose -f docker-compose.test.yml up -d network-debug redis
    
    echo ""
    log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "1. docker-compose -f docker-compose.test.yml exec network-debug ping google.com"
    echo "2. docker-compose -f docker-compose.test.yml exec network-debug nslookup api.twitterapi.io"
    echo "3. docker-compose -f docker-compose.test.yml exec network-debug curl -v https://api.twitterapi.io"
    echo "4. docker-compose -f docker-compose.test.yml exec network-debug traceroute api.twitterapi.io"
    echo ""
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping..."
    docker-compose -f docker-compose.test.yml exec network-debug ping -c 3 google.com || log_warning "Ping –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS..."
    docker-compose -f docker-compose.test.yml exec network-debug nslookup api.twitterapi.io || log_warning "DNS resolution –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP..."
    docker-compose -f docker-compose.test.yml exec network-debug curl -I --max-time 10 https://api.twitterapi.io || log_warning "HTTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    
    echo ""
    read -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.test.yml down
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker-compose -f docker-compose.test.yml down -v 2>/dev/null || true
    docker system prune -f --filter "label=project=mrbets" 2>/dev/null || true
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    # –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    trap cleanup EXIT
    
    case "${1:-all}" in
        "prereq")
            check_prerequisites
            ;;
        "build")
            check_prerequisites
            build_images
            ;;
        "test")
            check_prerequisites
            build_images
            run_basic_tests
            ;;
        "debug")
            check_prerequisites
            build_images
            interactive_debug
            ;;
        "all")
            check_prerequisites
            build_images
            if run_basic_tests; then
                log_success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
                log_info "Twitter Fetcher –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            else
                log_warning "–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∑–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É..."
                interactive_debug
            fi
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [prereq|build|test|debug|all]"
            echo ""
            echo "  prereq - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
            echo "  build  - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
            echo "  test   - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
            echo "  debug  - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
            echo "  all    - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            exit 1
            ;;
    esac
}

main "$@" 