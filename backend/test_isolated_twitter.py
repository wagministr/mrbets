#!/usr/bin/env python3
"""
test_isolated_twitter.py

–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç Twitter Fetcher –±–µ–∑ Docker-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TwitterAPI.io –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import os
import sys
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_twitterapi_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç TwitterAPI.io –±–µ–∑ Redis"""
    print("üê¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TwitterAPI.io (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ)")
    print("=" * 50)
    
    try:
        from fetchers.twitter_fetcher import TwitterAPIClient
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
        api_key = os.getenv("TWITTERAPI_IO_KEY")
        if not api_key:
            print("‚ùå TWITTERAPI_IO_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("üí° –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export TWITTERAPI_IO_KEY=your_key")
            return False
        
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        async with TwitterAPIClient() as client:
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–≤–∏—Ç–æ–≤...")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
            query = "from:OptaJoe"
            response = await client.advanced_search(query, query_type="Latest")
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response['error']}")
                return False
            
            tweets = response.get("tweets", [])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –æ—Ç OptaJoe")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä —Ç–≤–∏—Ç–∞
            if tweets:
                tweet = tweets[0]
                author = tweet.get("author", {})
                print(f"\nüìù –ü—Ä–∏–º–µ—Ä —Ç–≤–∏—Ç–∞:")
                print(f"   –ê–≤—Ç–æ—Ä: {author.get('name', 'Unknown')} (@{author.get('userName', 'unknown')})")
                print(f"   –¢–µ–∫—Å—Ç: {tweet.get('text', 'No text')[:100]}...")
                print(f"   –õ–∞–π–∫–∏: {tweet.get('likeCount', 0)}")
                print(f"   –†–µ—Ç–≤–∏—Ç—ã: {tweet.get('retweetCount', 0)}")
            
            return True
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install httpx python-dotenv")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_twitter_fetcher_mock():
    """–¢–µ—Å—Ç Twitter Fetcher —Å mock Redis"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Twitter Fetcher —Å mock Redis")
    print("=" * 50)
    
    try:
        # Mock Redis client
        class MockRedis:
            async def ping(self):
                return True
            
            async def xadd(self, stream_name, data):
                print(f"üì® Mock Redis: –¥–æ–±–∞–≤–ª–µ–Ω —Ç–≤–∏—Ç –≤ stream {stream_name}")
                return f"mock-stream-id-{datetime.now().timestamp()}"
            
            async def close(self):
                pass
        
        from fetchers.twitter_fetcher import TwitterFetcher
        
        # –°–æ–∑–¥–∞–µ–º fetcher —Å mock Redis
        fetcher = TwitterFetcher()
        fetcher.redis_client = MockRedis()
        
        print("‚úÖ Mock Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–≤–∏—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...")
        tweets = await fetcher.fetch_expert_tweets(hours_back=24)  # 24 —á–∞—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ —Ç–≤–∏—Ç—ã
        
        if tweets:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ mock Redis
            await fetcher.send_to_redis_stream(tweets)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º
            expert_stats = {}
            for tweet in tweets:
                username = tweet["author"]["username"]
                expert_stats[username] = expert_stats.get(username, 0) + 1
            
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–∫—Å–ø–µ—Ä—Ç–∞–º:")
            for expert, count in expert_stats.items():
                print(f"   @{expert}: {count} —Ç–≤–∏—Ç–æ–≤")
        else:
            print("‚ö†Ô∏è –¢–≤–∏—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ)")
        
        await fetcher.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Twitter Fetcher: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Twitter Fetcher")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ Docker –∏ Redis –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    success_count = 0
    total_tests = 2
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API
    if await test_twitterapi_direct():
        success_count += 1
    
    # –¢–µ—Å—Ç 2: Fetcher —Å mock
    if await test_twitter_fetcher_mock():
        success_count += 1
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤")
    
    if success_count == total_tests:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! TwitterAPI.io —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤ Docker —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    elif success_count > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    else:
        print("‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 