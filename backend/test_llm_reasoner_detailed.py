#!/usr/bin/env python3
"""
Detailed test for LLM Reasoner
"""
import asyncio
import json
from processors.llm_reasoner import LLMReasoner

async def test_llm_reasoner_detailed():
    """Detailed test with full output"""
    print("üß† –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LLM Reasoner")
    print("=" * 50)
    
    reasoner = LLMReasoner()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI...")
    connection_ok = await reasoner.test_model_connection()
    if not connection_ok:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    print("‚úÖ OpenAI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –∏–∑ Retriever)
    mock_context = {
        "match_info": {
            "fixture_id": 1035065,
            "home_team_name": "Newcastle",
            "away_team_name": "Liverpool", 
            "home_team_id": 34,
            "away_team_id": 40,
            "event_date": "2023-08-27T15:30:00Z",
            "league_id": 39,
            "status": "NS"
        },
        "content_summary": {
            "total_chunks": 13,
            "sources": ["bbc_sport"],
            "content_types": ["Player Performance/Praise", "Match Result/Report", "League/Competition News", "Transfer News/Rumor"],
            "avg_importance": 4.3,
            "date_range": {
                "earliest": "2023-08-20T10:00:00Z",
                "latest": "2023-08-26T18:30:00Z"
            }
        },
        "structured_content": {
            "Player Performance/Praise": [
                {
                    "text": "Mohamed Salah has scored in 8 of his last 10 Premier League appearances against Newcastle, showing exceptional consistency against this opponent.",
                    "source": "bbc_sport",
                    "chunk_type": "Player Performance/Praise",
                    "importance_score": 5,
                    "tone": "positive",
                    "document_title": "Salah's Newcastle record"
                }
            ],
            "Transfer News/Rumor": [
                {
                    "text": "Newcastle United have strengthened their squad with key signings in the summer transfer window, adding depth in midfield and attack.",
                    "source": "bbc_sport", 
                    "chunk_type": "Transfer News/Rumor",
                    "importance_score": 4,
                    "tone": "positive",
                    "document_title": "Newcastle transfer activity"
                }
            ],
            "League/Competition News": [
                {
                    "text": "Liverpool's Champions League qualification hopes depend on maintaining consistency in their remaining Premier League fixtures.",
                    "source": "bbc_sport",
                    "chunk_type": "League/Competition News", 
                    "importance_score": 4,
                    "tone": "analytical",
                    "document_title": "Liverpool season objectives"
                }
            ]
        },
        "all_content": [
            {
                "text": "Mohamed Salah has scored in 8 of his last 10 Premier League appearances against Newcastle, showing exceptional consistency against this opponent.",
                "source": "bbc_sport",
                "chunk_type": "Player Performance/Praise",
                "importance_score": 5,
                "linked_team_ids": ["40"],
                "linked_player_ids": ["306"]
            }
        ]
    }
    
    mock_odds = {
        "1X2": {"home": 3.20, "draw": 3.40, "away": 2.30},
        "Over/Under 2.5": {"over": 1.90, "under": 1.95},
        "Both Teams to Score": {"yes": 1.85, "no": 2.00},
        "Double Chance": {"1X": 1.80, "X2": 1.45, "12": 1.25}
    }
    
    print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    prediction = await reasoner.generate_prediction(mock_context, mock_odds)
    
    if not prediction:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
        return False
    
    print("\n‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üéØ –ú–∞—Ç—á: {mock_context['match_info']['home_team_name']} vs {mock_context['match_info']['away_team_name']}")
    print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence_score', 'unknown')}%")
    print(f"üïí –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {prediction.get('processing_time_seconds', 'unknown')}s")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {prediction.get('model_version', 'unknown')}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    print(f"\nüîÆ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:")
    print(f"   {prediction.get('final_prediction', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    
    # Chain of Thought
    chain_of_thought = prediction.get('chain_of_thought', '')
    if chain_of_thought:
        print(f"\nüß† –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ:")
        print(f"   {chain_of_thought[:300]}..." if len(chain_of_thought) > 300 else f"   {chain_of_thought}")
    
    # Value Bets
    value_bets = prediction.get('value_bets', [])
    print(f"\nüí∞ Value Bets ({len(value_bets)} –Ω–∞–π–¥–µ–Ω–æ):")
    for i, bet in enumerate(value_bets, 1):
        print(f"   {i}. {bet.get('market', 'Unknown')}")
        print(f"      üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {bet.get('recommended_probability', 'N/A')}")
        print(f"      üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–∫–º–µ–∫–µ—Ä–∞: {bet.get('bookmaker_odds', 'N/A')}")
        print(f"      üìà –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {bet.get('implied_probability', 'N/A')}")
        print(f"      ‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {bet.get('confidence', 'N/A')}%")
        print(f"      üíµ –î–æ–ª—è –±–∞–Ω–∫–∞: {bet.get('stake_percentage', 'N/A')}%")
        reasoning = bet.get('reasoning', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        print(f"      üîç –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reasoning[:150]}...")
        print()
    
    # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    insights = prediction.get('key_insights', [])
    if insights:
        print(f"üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:")
        for insight in insights:
            print(f"   ‚Ä¢ {insight}")
    
    # –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
    risk_factors = prediction.get('risk_factors', [])
    if risk_factors:
        print(f"\n‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:")
        for risk in risk_factors:
            print(f"   ‚Ä¢ {risk}")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_quality = prediction.get('context_quality', {})
    if context_quality:
        print(f"\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:")
        for key, value in context_quality.items():
            print(f"   {key}: {value}")
    
    print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    asyncio.run(test_llm_reasoner_detailed()) 