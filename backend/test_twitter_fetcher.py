#!/usr/bin/env python3
"""
test_twitter_fetcher.py

–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Twitter fetcher —Å TwitterAPI.io
"""

import asyncio
import logging
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from fetchers.twitter_fetcher import TwitterFetcher, TwitterAPIClient, main_twitter_task

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def test_twitter_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TwitterAPI.io"""
    print("üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TwitterAPI.io...")
    
    try:
        async with TwitterAPIClient() as client:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            response = await client.advanced_search(
                query="football",
                query_type="Latest"
            )
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response['error']}")
                return False
            
            tweets = response.get("tweets", [])
            print(f"‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False


async def test_twitter_fetcher_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Twitter Fetcher"""
    print("\nüß™ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Twitter Fetcher...")
    
    fetcher = TwitterFetcher()
    
    try:
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        await fetcher.connect_redis()
        print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
        print("üìä –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (15 –º–∏–Ω—É—Ç)...")
        expert_tweets = await fetcher.fetch_expert_tweets(hours_back=0.25)  # 15 –º–∏–Ω—É—Ç
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(expert_tweets)} —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
        if expert_tweets:
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤:")
            for i, tweet in enumerate(expert_tweets[:3]):
                print(f"  {i+1}. @{tweet['author']['username']}: {tweet['text'][:100]}...")
                print(f"     Engagement: {tweet['engagement_score']}, Reliability: {tweet['reliability_score']}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (15 –º–∏–Ω—É—Ç)...")
        keyword_tweets = await fetcher.search_keyword_tweets(hours_back=0.25, max_results=10)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(keyword_tweets)} —Ç–≤–∏—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        
        if keyword_tweets:
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã —Ç–≤–∏—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
            for i, tweet in enumerate(keyword_tweets[:3]):
                print(f"  {i+1}. @{tweet['author']['username']}: {tweet['text'][:100]}...")
                print(f"     –•—ç—à—Ç–µ–≥–∏: {tweet['hashtags']}")
        
        await fetcher.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await fetcher.close()
        return False


async def test_expert_accounts():
    """–¢–µ—Å—Ç —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüë• –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    from fetchers.twitter_fetcher import EXPERT_ACCOUNTS
    
    print(f"üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(EXPERT_ACCOUNTS)} —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
    for i, account in enumerate(EXPERT_ACCOUNTS, 1):
        print(f"  {i}. @{account}")
    
    async with TwitterAPIClient() as client:
        working_accounts = 0
        
        for account in EXPERT_ACCOUNTS[:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–∏–º–∏—Ç–æ–≤
            try:
                response = await client.advanced_search(
                    query=f"from:{account}",
                    query_type="Latest"
                )
                
                if "error" not in response and response.get("tweets"):
                    working_accounts += 1
                    print(f"  ‚úÖ @{account} –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"  ‚ö†Ô∏è @{account} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
            except Exception as e:
                print(f"  ‚ùå @{account} –æ—à–∏–±–∫–∞: {e}")
        
        print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ {working_accounts}/3 –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")


async def test_redis_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Redis"""
    print("\nüîÑ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Redis...")
    
    fetcher = TwitterFetcher()
    
    try:
        await fetcher.connect_redis()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–≤–∏—Ç—ã
        test_tweets = [
            {
                "tweet_id": "test_123",
                "text": "Test tweet for Redis integration #football",
                "author": {
                    "username": "test_user",
                    "name": "Test User",
                    "followers": 1000,
                    "verified": False
                },
                "created_at": "2025-01-01T12:00:00Z",
                "engagement_score": 50.0,
                "reliability_score": 0.8,
                "hashtags": ["football"],
                "mentions": [],
                "urls": [],
                "metrics": {"like_count": 10, "retweet_count": 5},
                "is_reply": False,
                "language": "en",
                "url": "https://twitter.com/test_user/status/test_123"
            }
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Redis
        await fetcher.send_to_redis_stream(test_tweets)
        print("‚úÖ –¢–µ—Å—Ç —Ç–≤–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Redis Stream")
        
        await fetcher.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        await fetcher.close()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üê¶ TWITTER FETCHER TESTING SUITE")
    print("=" * 50)
    
    tests = [
        ("API Connection", test_twitter_api_connection),
        ("Expert Accounts", test_expert_accounts),
        ("Redis Integration", test_redis_integration),
        ("Basic Functionality", test_twitter_fetcher_basic),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ Running: {test_name}")
        print("-" * 40)
        
        try:
            success = await test_func()
            if success:
                passed += 1
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
    
    print(f"\nüìä TWITTER FETCHER TEST RESULTS")
    print("=" * 50)
    print(f"   Passed: {passed}/{total}")
    print(f"   Success Rate: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("üéâ ALL TESTS PASSED! Twitter Fetcher ready for production!")
    else:
        print("‚ö†Ô∏è Some tests failed. Check configuration and API limits.")


if __name__ == "__main__":
    asyncio.run(main()) 