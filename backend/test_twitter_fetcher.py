#!/usr/bin/env python3
"""
test_twitter_fetcher.py

–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Twitter fetcher —Å TwitterAPI.io
"""

import asyncio
import logging
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from fetchers.twitter_fetcher import TwitterFetcher, TwitterAPIClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


async def test_twitter_api_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TwitterAPI.io"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TwitterAPI.io...")
    
    try:
        async with TwitterAPIClient() as client:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = await client.advanced_search("football", max_results=5)
            
            if "error" in response:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response['error']}")
                return False
            
            tweets = response.get("tweets", [])
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤")
            
            if tweets:
                first_tweet = tweets[0]
                print(f"üìù –ü—Ä–∏–º–µ—Ä —Ç–≤–∏—Ç–∞: {first_tweet.get('text', '')[:100]}...")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False


async def test_expert_monitoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...")
    
    fetcher = TwitterFetcher()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–∏—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        tweets = await fetcher.fetch_expert_tweets(hours_back=24)  # 24 —á–∞—Å–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources = {}
        for tweet in tweets:
            username = tweet["author"]["username"]
            sources[username] = sources.get(username, 0) + 1
        
        if sources:
            print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
            for username, count in sources.items():
                print(f"  @{username}: {count} —Ç–≤–∏—Ç–æ–≤")
                
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–≤–∏—Ç–∞ —Å –ª—É—á—à–∏–º engagement
        if tweets:
            best_tweet = max(tweets, key=lambda t: t["engagement_score"])
            print(f"\nüèÜ –¢–≤–∏—Ç —Å –ª—É—á—à–∏–º engagement ({best_tweet['engagement_score']}):")
            print(f"  @{best_tweet['author']['username']}: {best_tweet['text'][:150]}...")
        
        return len(tweets) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {e}")
        return False
    finally:
        await fetcher.close()


async def test_keyword_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...")
    
    fetcher = TwitterFetcher()
    
    try:
        tweets = await fetcher.search_keyword_tweets(hours_back=12, max_results=20)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tweets)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏
        all_hashtags = []
        for tweet in tweets:
            all_hashtags.extend(tweet["hashtags"])
        
        if all_hashtags:
            from collections import Counter
            popular_hashtags = Counter(all_hashtags).most_common(5)
            print("üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏:")
            for hashtag, count in popular_hashtags:
                print(f"  #{hashtag}: {count}")
        
        return len(tweets) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
        return False
    finally:
        await fetcher.close()


async def check_redis_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö"""
    import redis.asyncio as redis
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö Redis URLs –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    redis_urls = [
        "redis://localhost:6379/0",  # –õ–æ–∫–∞–ª—å–Ω—ã–π Redis
        "redis://127.0.0.1:6379/0",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π localhost
        "redis://redis:6379/0"       # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    ]
    
    for redis_url in redis_urls:
        try:
            client = redis.from_url(redis_url)
            await client.ping()
            await client.close()
            print(f"‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: {redis_url}")
            return redis_url
        except Exception as e:
            print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {redis_url}: {e}")
    
    return None


async def test_redis_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Redis"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Redis...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
    available_redis_url = await check_redis_availability()
    
    if not available_redis_url:
        print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
        print("üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ Redis:")
        print("   sudo apt install redis-server && sudo systemctl start redis")
        print("   –∏–ª–∏ —á–µ—Ä–µ–∑ Docker: docker run -d -p 6379:6379 redis:7")
        return False
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º REDIS_URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    original_redis_url = os.getenv("REDIS_URL")
    os.environ["REDIS_URL"] = available_redis_url
    
    fetcher = TwitterFetcher()
    
    try:
        await fetcher.connect_redis()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–≤–∏—Ç
        test_tweet = {
            "tweet_id": "test_123",
            "text": "Test tweet for Redis integration",
            "author": {
                "username": "test_user",
                "name": "Test User",
                "followers": 1000,
                "verified": False
            },
            "created_at": datetime.now().isoformat(),
            "url": "https://twitter.com/test_user/status/test_123",
            "metrics": {
                "like_count": 10,
                "retweet_count": 5,
                "reply_count": 2,
                "quote_count": 1,
                "view_count": 100,
                "bookmark_count": 3
            },
            "engagement_score": 25.5,
            "reliability_score": 0.7,
            "hashtags": ["test"],
            "mentions": [],
            "urls": [],
            "language": "en",
            "is_reply": False,
            "source": "Twitter Web App"
        }
        
        await fetcher.send_to_redis_stream([test_tweet])
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Redis Stream")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
        return False
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π REDIS_URL
        if original_redis_url:
            os.environ["REDIS_URL"] = original_redis_url
        elif "REDIS_URL" in os.environ:
            del os.environ["REDIS_URL"]
        
        await fetcher.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üê¶ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Twitter Fetcher (TwitterAPI.io)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv("TWITTERAPI_IO_KEY")
    if not api_key:
        print("‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TWITTERAPI_IO_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á API –æ—Ç TwitterAPI.io –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   export TWITTERAPI_IO_KEY=–≤–∞—à_–∫–ª—é—á")
        return
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-5:]}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É Redis
    current_redis = os.getenv("REDIS_URL", "redis://localhost:6379/0")
    print(f"üîß –¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Redis: {current_redis}")
    
    tests = [
        ("API Connection", test_twitter_api_connection),
        ("Expert Monitoring", test_expert_monitoring),
        ("Keyword Search", test_keyword_search),
        ("Redis Integration", test_redis_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("Twitter Fetcher –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å TwitterAPI.io")
    elif passed >= 3:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("Twitter Fetcher –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é (–±–µ–∑ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")


if __name__ == "__main__":
    asyncio.run(main()) 